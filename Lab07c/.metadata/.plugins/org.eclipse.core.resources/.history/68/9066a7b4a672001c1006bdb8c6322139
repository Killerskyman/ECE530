//Author: Skyler Cleland
//Date: 2022-01-02
//purpose: simple LED ping pong game with variable difficulty
#include "xparameters.h"
#include "xgpio.h"
#include "led_IP.h"
#include "xtmrctr.h"
#include "xscugic.h"

#define ONE_TENTH 32500000 // half of the CPU clock speed/10 of 650MHz

//device IDs
#define TIMERID XPAR_TMRCTR_0_DEVICE_ID
#define SWITCHESID XPAR_SWITCHES_DEVICE_ID
#define BUTTONSID XPAR_BUTTONS_DEVICE_ID

typedef enum {OVER, START} GameStatus;
typedef enum {LEFT, RIGHT} Direction;
typedef enum {LD3=8, LD2=4, LD1=2, LD0=1} BallPosition;
typedef enum {LATEHIT, EARLYHIT, HIT, RESET, CONTINUOUS} PlayStatus;

#define BALL_START_DIRECTION RIGHT

//port setup for switches and buttons
#define INPUT 0xffffffff

//push button masks
#define RESETBUTTON 0b0100
#define STARTBUTTON 0b0010
#define LEFTPADDLE  0b1000
#define RIGHTPADDLE 0b0001

//LED ball positions
#define LEFT_SERVE 0b0001
#define RIGHT_SERVE 0b1000
#define NO_BALL 0b0000
#define ALL_BALL 0b1111

int push_button_value, slide_switch_check, Status;
XGpio slideSwitches, push_buttons;
// PS Timer related definitions

int scoreright, scoreleft;



int SetupButtons(XGpio *Pushbuttondevice, int DeviceID) {
	int status;
	// Initialize Push Buttons
	  status = XGpio_Initialize(Pushbuttondevice, DeviceID);
	  if(status != XST_SUCCESS) return XST_FAILURE;

	  // Set all buttons direction to inputs
	  XGpio_SetDataDirection(Pushbuttondevice, 1, 0xFF);
	  // Level 3: Enable GPIO interrupts interrupt - JJS
	  	XGpio_InterruptGlobalEnable(Pushbuttondevice);
	  //Level 3: channel 1 only
	  	XGpio_InterruptEnable(Pushbuttondevice, BTN_INT_MASK);
	  	return XST_SUCCESS;
}

int SetupTimer(XTmrCtr *Timerdevice, int DeviceID) {
	int status;
	  status = XTmrCtr_Initialize(Timerdevice, DeviceID);
	  if(status != XST_SUCCESS) return XST_FAILURE;
	  //Level 3: timer. There is a warning on type mismatch for the handler but the statement works.
	  XTmrCtr_SetHandler(Timerdevice, (XTmrCtr_Handler) TMR_Intr_Handler, Timerdevice);
	  XTmrCtr_SetResetValue(Timerdevice, 0, TMR_LOAD);
	  XTmrCtr_SetOptions(Timerdevice, 0, XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);
	  //Start timer
	  XTmrCtr_Start(Timerdevice, 0);
	  return XST_SUCCESS;
}

int GICconfiguration(u16 DeviceId, XTmrCtr *TmrInstancePtr, XGpio *GpioInstancePtr)
{
	XScuGic_Config *IntcConfig;
	int status;
// Level 2: Generic Interrupt controller (GIC) initialization
	IntcConfig = XScuGic_LookupConfig(DeviceId);
	status = XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);
	if(status != XST_SUCCESS) return XST_FAILURE;
// Level 2: Connect GPIO interrupt to handler
	status = XScuGic_Connect(&INTCInst,
		INTC_GPIO_INTERRUPT_ID, (Xil_ExceptionHandler)BTN_Intr_Handler, (void *)GpioInstancePtr);
	if(status != XST_SUCCESS) return XST_FAILURE;
// Level 2: Connect timer interrupt to handler
	status = XScuGic_Connect(&INTCInst,
		 INTC_TMR_INTERRUPT_ID,
	 (Xil_ExceptionHandler)TMR_Intr_Handler,(void *)TmrInstancePtr);
	if(status != XST_SUCCESS) return XST_FAILURE;
	// Level 2: Enable GPIO and timer interrupts in the controller - JJS
	XScuGic_Enable(&INTCInst, INTC_GPIO_INTERRUPT_ID);
	XScuGic_Enable(&INTCInst, INTC_TMR_INTERRUPT_ID);
//Level 1: to assign GIC handler to IRQ vector of Cortex A9 CPU
		Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, &INTCInst);
		Xil_ExceptionEnable();	//this will enable IRQ interrupt
	return XST_SUCCESS;
}

//used to update LEDs
void UpdateLEDs(u32 LED_Value){
	LED_IP_mWriteReg(XPAR_LED_IP_0_S_AXI_BASEADDR, 0, LED_Value);
}



int main (void){
	//used for random for loops
	unsigned int i;

	PlayStatus PlayerResult;
	GameStatus Game;
	Direction BallDirection;

	//setup buttons and switches
	initSwitches(&slideSwitches, SWITCHESID, INPUT);
	initSwitches(&push_buttons, BUTTONSID, INPUT);

	//init the game
	xil_printf("-- Start of the Ping Pong Game --\r\n");
	scoreright = 0; scoreleft = 0;
	xil_printf("Score Left = %d   Score Right = %d\r\n", scoreleft, scoreright);
	BallDirection = BALL_START_DIRECTION; Game = OVER;
	//turn off LEDs
	UpdateLEDs(NO_BALL);

	while (1);
}
